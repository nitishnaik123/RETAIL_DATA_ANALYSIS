create DATABASE RETAILS;
USE RETAILS;
use schema PUBLIC;

-----------------------------------CREATING TABLES-----------------------------------------------------------------------

CREATE OR REPLACE TABLE demographic_RAW
(AGE_DESC CHAR(20),
MARTIAL_STATUS_CODE CHAR(5),
INCOME_DESC VARCHAR(40),
HOMEOWNER_DESC VARCHAR(50),
HH_COMP_DESC VARCHAR (50),
HOUSEHOLD_SIZE_DESC VARCHAR(50),
KID_CATEGORY_DESC VARCHAR(40),
household_key INT PRIMARY KEY
);


CREATE OR REPLACE TABLE CAMPAIGN_DESC_RAW
(DESCRIPTION CHAR(10),	
CAMPAIGN	INT ,
START_DAY	INT,
END_DAY INT,
PRIMARY KEY (DESCRIPTION),
UNIQUE (CAMPAIGN));




CREATE OR REPLACE TABLE CAMPAIGN_RAW
(DESCRIPTION CHAR(10),
household_key  INT,
CAMPAIGN INT,
FOREIGN KEY (DESCRIPTION) references CAMPAIGN_DESC_RAW(DESCRIPTION),
FOREIGN KEY (CAMPAIGN) references CAMPAIGN_DESC_RAW(CAMPAIGN),
FOREIGN KEY (household_key) references demographic_RAW (household_key)
);

CREATE OR REPLACE TABLE PRODUCT_RAW
(PRODUCT_ID INT PRIMARY KEY,
MANUFACTURER INT,
DEPARTMENT VARCHAR(50),
BRAND VARCHAR(30),
COMMODITY_DESC VARCHAR(65),
SUB_COMMODITY_DESC VARCHAR(65),
CURR_SIZE_OF_PRODUCT VARCHAR(15)
);

CREATE OR REPLACE TABLE COUPON_RAW
(COUPON_UPC INT,
PRODUCT_ID INT,
CAMPAIGN INT,
FOREIGN KEY (PRODUCT_ID) references PRODUCT_RAW(PRODUCT_ID),
FOREIGN KEY (CAMPAIGN) references CAMPAIGN_DESC_RAW(CAMPAIGN)
);

CREATE OR REPLACE TABLE COUPON_REDEMPT_RAW
(household_key INT,
DAY INT,
COUPON_UPC INT,
CAMPAIGN INT,
FOREIGN KEY (household_key) references demographic_RAW(household_key),
FOREIGN KEY (CAMPAIGN) references CAMPAIGN_DESC_RAW(CAMPAIGN)
);

CREATE OR REPLACE TABLE TRANSACTION_RAW
(household_key INT,
BASKET_ID INT,
DAY INT,
PRODUCT_ID INT,
QUANTITY INT,
SALES_VALUE FLOAT,
STORE_VALUE INT,
RETAIL_DISC FLOAT,
TRANS_TIME INT,
WEEK_NO INT,
COUPON_DISC INT,
COUPON_MATCH_DISC INT,
FOREIGN KEY(PRODUCT_ID) references PRODUCT_RAW(PRODUCT_ID),
FOREIGN KEY (household_key) references demographic_RAW(household_key)
);

Show Tables;

-------------------------AWS (S3) INTEGRATION ----------------------------------------------

CREATE OR REPLACE STORAGE integration s3_int
TYPE = EXTERNAL_STAGE
STORAGE_PROVIDER = S3
ENABLED = TRUE
STORAGE_AWS_ROLE_ARN = 'arn:aws:iam::813610546334:role/retailnitishrole'
STORAGE_ALLOWED_LOCATIONS = ('s3://retailnitish/');

DESC integration s3_int;

CREATE OR REPLACE STAGE RETAILS
URL ='s3://retailnitish'
file_format = CSV_RETAIL
storage_integration = s3_int;

LIST @RETAILS;

SHOW STAGES;


--CREATE SNOWPIPE THAT RECOGNISES CSV THAT ARE INGESTED FROM EXTERNAL STAGE AND COPIES THE DATA INTO EXISTING TABLE

--The AUTO_INGEST=true parameter specifies to read 
--- event notifications sent from an S3 bucket to an SQS queue when new data is ready to load.

--------------------------------------CREATING SNOWPIPE----------------------------------------


CREATE OR REPLACE PIPE RETAIL_SNOWPIPE_DEMOGRAPHIC AUTO_INGEST = TRUE AS
COPY INTO "RETAILS"."PUBLIC"."DEMOGRAPHIC_RAW" --yourdatabase -- your schema ---your table
FROM '@RETAILS/DEMOGRAPHIC/' --s3 bucket subfolde4r name
FILE_FORMAT = CSV_RETAIL; --YOUR CSV FILE FORMAT NAME

CREATE OR REPLACE PIPE RETAIL_SNOWPIPE_CAMPAIGN_DESC AUTO_INGEST = TRUE AS
COPY INTO "RETAILS"."PUBLIC"."CAMPAIGN_DESC_RAW"
FROM '@RETAILS/COMPAIGN_DESK/' 
FILE_FORMAT = CSV_RETAIL;


CREATE OR REPLACE PIPE RETAIL_SNOWPIPE_CAMPAIGN AUTO_INGEST = TRUE AS
COPY INTO "RETAILS"."PUBLIC"."CAMPAIGN_RAW"
FROM '@RETAILS/COMPAIGN/' 
FILE_FORMAT = CSV_RETAIL;

CREATE OR REPLACE PIPE RETAIL_SNOWPIPE_PRODUCT AUTO_INGEST = TRUE AS
COPY INTO "RETAILS"."PUBLIC"."PRODUCT_RAW"
FROM '@RETAILS/PRODUCT/' 
FILE_FORMAT = CSV_RETAIL;


CREATE OR REPLACE PIPE RETAIL_SNOWPIPE_COUPON AUTO_INGEST = TRUE AS
COPY INTO "RETAILS"."PUBLIC"."COUPON_RAW"
FROM '@RETAILS/COUPON/' 
FILE_FORMAT = CSV_RETAIL;

CREATE OR REPLACE PIPE RETAIL_SNOWPIPE_COUPON_REDEMPT  AUTO_INGEST = TRUE AS
COPY INTO "RETAILS"."PUBLIC"."COUPON_REDEMPT_RAW"
FROM '@RETAILS/COUPON_REDEMPT/' 
FILE_FORMAT = CSV_RETAIL;

CREATE OR REPLACE PIPE RETAIL_SNOWPIPE_TRANSACTION  AUTO_INGEST = TRUE AS
COPY INTO "RETAILS"."PUBLIC"."TRANSACTION_RAW"
FROM '@RETAILS/TRANSACTION/' 
FILE_FORMAT = CSV_RETAIL;

SHOW PIPES;

SELECT COUNT(*) FROM demographic_RAW;
SELECT COUNT(*) FROM CAMPAIGN_DESC_RAW;
SELECT COUNT(*) FROM CAMPAIGN_RAW;
SELECT COUNT(*) FROM PRODUCT_RAW;
SELECT COUNT(*) FROM COUPON_RAW;
SELECT COUNT(*) FROM COUPON_REDEMPT_RAW;
SELECT COUNT(*) FROM TRANSACTION_RAW;

----------------------------------------------PIPEREFRESH----------------------------------------------------------------------

ALTER PIPE RETAIL_SNOWPIPE_DEMOGRAPHIC refresh;
ALTER PIPE RETAIL_SNOWPIPE_CAMPAIGN_DESC refresh;
ALTER PIPE RETAIL_SNOWPIPE_CAMPAIGN refresh;
ALTER PIPE RETAIL_SNOWPIPE_PRODUCT refresh;
ALTER PIPE RETAIL_SNOWPIPE_COUPON refresh;
ALTER PIPE RETAIL_SNOWPIPE_COUPON_REDEMPT refresh;
ALTER PIPE RETAIL_SNOWPIPE_TRANSACTION refresh;

SELECT * FROM demographic_RAW;
SELECT * FROM CAMPAIGN_DESC_RAW;
SELECT * FROM CAMPAIGN_RAW;
SELECT * FROM PRODUCT_RAW;
SELECT * FROM COUPON_RAW;
SELECT * FROM COUPON_REDEMPT_RAW;
SELECT * FROM TRANSACTION_RAW;

--------------------------------new tables form jupyter notebook-----------------------------------------------------------------

SELECT COUNT(*) FROM CAMPAIGN_DESC_NEW;
SELECT COUNT(*) FROM COUPON_REDEMPT_NEW;
SELECT COUNT(*) FROM TRANSACTION_NEW;

SELECT * FROM CAMPAIGN_DESC_NEW;
SELECT * FROM COUPON_REDEMPT_NEW;
SELECT * FROM TRANSACTION_NEW;

-----------------------------------------CREATING KPIS------------------------------------------------

USE RETAILS;

--------department wise product cocunt-
SELECT DISTINCT(DEPARTMENT),COUNT(*) AS TOTAL_PRODUCT
FROM PRODUCT_RAW
GROUP BY 1
ORDER BY 2 DESC;

------------------------------------------------1)  DEMOGRAPHIC KPIS----------------------------------------------------------------


---1)    Customer Demographics KPIs;
---A. Count of unique households: Measure the total number of unique households in the Demographic table.
---B. Household composition distribution: Analyze the distribution of household compositons (HH_COMP_DESC) to understand the composition of households.
---C. Age distribution: Calculate the percentage or count of customers in different age group(AGE_DESC)
---D.Martial status distribution: Analyze the proportion of customers in different martial status categories (MARTIAL_STATUS_CODE)
---E. Income distribution: Determine the distribution of customers across income levels (INCOME_DESC)
---F. Homeownership distribution: Calculate the percentage of count of customers who own or rent their homes (HOMEOWNER_DESC).*/

SELECT COUNT(DISTINCT HOUSEHOLD_KEY) AS TOTAL_HOUSEHOLDS FROM demographic_RAW;

SELECT HH_COMP_DESC,COUNT(DISTINCT HOUSEHOLD_KEY) AS TOTAL_HOUSEHOLDS
FROM DEMOGRAPHIC_RAW 
GROUP BY 1
ORDER BY 2 DESC;

SELECT AGE_DESC,TOTAL_HOUSEHOLDS,ROUND(TOTAL_HOUSEHOLDS/2500 * 100,2) AS PERC_AGEWISE_HOUSEHOLDS_DISTR
FROM
(SELECT AGE_DESC,
COUNT(DISTINCT HOUSEHOLD_KEY) AS TOTAL_HOUSEHOLDS
FROM DEMOGRAPHIC_RAW
GROUP BY 1
ORDER BY 2 DESC)
GROUP BY 1,2;

SELECT MARTIAL_STATUS_CODE, COUNT(DISTINCT HOUSEHOLD_KEY) AS TOTAL_HOUSEHOLDS,
ROUND(COUNT(DISTINCT HOUSEHOLD_KEY)/2500 * 100,2) AS PERC_MARTIAL_HOUSEHOLDS_DISTR
FROM DEMOGRAPHIC_RAW
GROUP BY 1
ORDER BY 2 DESC;

SELECT INCOME_DESC, COUNT(DISTINCT HOUSEHOLD_KEY) AS TOTAL_HOUSEHOLDS,
ROUND(COUNT(DISTINCT HOUSEHOLD_KEY)/2500 * 100,2) AS PERC_INCOME_HOUSEHOLDS_DISTR
FROM DEMOGRAPHIC_RAW
GROUP BY 1
ORDER BY 2 DESC;

SELECT HOMEOWNER_DESC, COUNT(DISTINCT HOUSEHOLD_KEY) AS TOTAL_HOUSEHOLDS,
ROUND(COUNT(DISTINCT HOUSEHOLD_KEY)/2500 * 100,2 ) AS PERC_HOMEOWNER_HOUSEHOLDS_DISTR
FROM DEMOGRAPHIC_RAW
GROUP BY 1
ORDER BY 2 DESC;

SELECT T.HOUSEHOLD_KEY,D.AGE_DESC,D.MARTIAL_STATUS_CODE,D.INCOME_DESC,AVG(T.SALES_VALUE) AS AVG_AMOUNT,
AVG(T.RETAIL_DISC) AS AVG_RETAIL_DIS, AVG(T.COUPON_DISC)AS AVG_COUPON_DISC,AVG(T.COUPON_MATCH_DISC)AS AVG_COUP_MATCH_DISC
FROM TRANSACTION_NEW T
LEFT OUTER JOIN DEMOGRAPHIC_RAW D ON T.HOUSEHOLD_KEY=D.HOUSEHOLD_KEY
GROUP BY 1,2,3,4
ORDER BY 1;

 ------DEMOGRAPHIC KPI TABLE---------------
 
CREATE OR REPLACE PROCEDURE Household_kpi()
RETURNS STRING
LANGUAGE SQL
AS
$$
CREATE OR REPLACE TABLE Household_kpi AS (SELECT T.HOUSEHOLD_KEY,D.AGE_DESC,D.MARTIAL_STATUS_CODE,D.INCOME_DESC,AVG(T.SALES_VALUE) AS AVG_AMOUNT,
AVG(T.RETAIL_DISC) AS AVG_RETAIL_DIS, AVG(T.COUPON_DISC)AS AVG_COUPON_DISC,AVG(T.COUPON_MATCH_DISC)AS AVG_COUP_MATCH_DISC
FROM TRANSACTION_NEW T
LEFT OUTER JOIN Demographic_RAW D ON T.HOUSEHOLD_KEY = D.HOUSEHOLD_KEY
GROUP BY 1,2,3,4
ORDER BY 1);
$$;

SHOW PROCEDURES;

CALL Household_kpi();

SELECT * FROM Household_kpi;

------------------------------------------------------ 2) CAMPAIGN KPIS------------------------------------------------------------

----2) Campaign KPIs:
----Number of campaigns: Count the total number of campaigns in the campaign table.
----Campiagn duration: Calculate the duration of each campaign by subtracting the start day from the end day(in the campaign_desc_table).
----Campaign effectivenss: Analyze the number of housholds associated with each campign (in the Campaign table) to measur campaign reach.
 
SELECT * FROM CAMPAIGN_DESC_NEW;
SELECT * FROM CAMPAIGN_RAW;

SELECT * FROM "RETAILS"."PUBLIC"."CAMPAIGN_DESC_NEW";  

SELECT * "RETAILS"."PUBLIC"."CAMPAIGN_DESC_NEW" FROM CAMPAIGN_DESC_NEW;

--1
SELECT COUNT(DISTINCT CAMPAIGN) FROM CAMPAIGN_RAW;
SELECT COUNT(DISTINCT CAMPAIGN) AS TOTAL_CAMPAIGN FROM RETAILS.PUBLIC.CAMPAIGN_DESC_NEW;
--2
SELECT CAMPAIGN, START_DATE, END_DATE, CAMPAIGN_DURATION
FROM CAMPAIGN_DESC_NEW
ORDER BY CAMPAIGN_DURATION DESC;

--3
SELECT CAMPAIGN, COUNT(DISTINCT HOUSEHOLD_KEY) AS TOTAL_HOUSEHOLDS
FROM CAMPAIGN_RAW
GROUP BY 1
ORDER BY 2 DESC;

---------------CAMPAIGN KPI TABLE--------------
CREATE OR REPLACE PROCEDURE CAMPAIGN_KPI()
RETURNS STRING
LANGUAGE SQL
AS
$$
CREATE OR REPLACE TABLE CAMPAIGN_KPI AS 
SELECT A.CAMPAIGN,A.CAMPAIGN_DURATION,START_DATE,END_DATE,A.DESCRIPTION,START_YEAR,END_YEAR,
COUNT( B.CAMPAIGN) AS TOTAL_CAMPAIGN,ROUND(COUNT(DISTINCT HOUSEHOLD_KEY)/2500*100,2) AS PER_DIS_CAMPAIGN
FROM RETAILS.PUBLIC.CAMPAIGN_DESC_NEW A LEFT JOIN CAMPAIGN_RAW B ON A.CAMPAIGN=B.CAMPAIGN
GROUP BY 1,2,3,4,5,6,7;
$$;

SHOW PROCEDURES;

CALL CAMPAIGN_KPI();

SELECT * FROM CAMPAIGN_KPI;

-- IMPACT OF CAMPAIGN ON SALES

-- SELECT CR.CAMPAIGN, COUNT(DISTINCT TXN.HOUSEHOLD_KEY)AS COUNT_HOUSEHOLDS, SUM(TXN.SALES_VALUE), AVG(TXN.SALES_VALUE)
-- FROM TRANSACTION_NEW AS TXN LEFT OUTER JOIN CAMPAIGN_RAW AS CR USING(HOUSEHOLD_KEY)
-- GROUP BY 1
-- ORDER BY 4 DESC, 2 DESC, 3 DESC;


-- SELECT CAMPAIGN_STATUS, AVG(TOTAL_SALES) AS AVG_SALES FROM (
-- SELECT CR.CAMPAIGN, COUNT(DISTINCT TXN.HOUSEHOLD_KEY), SUM(TXN.QUANTITY* (TXN.SALES_VALUE + TXN.RETAIL_DISC )) AS TOTAL_SALES, CASE WHEN CR.CAMPAIGN IS NULL THEN 'NO_CAMPAIGN_TXN' ELSE 'CAMPAIGN_TXN' END AS CAMPAIGN_STATUS
-- FROM TRANSACTION_NEW AS TXN LEFT OUTER JOIN CAMPAIGN_RAW AS CR USING(HOUSEHOLD_KEY)
-- GROUP BY 1
-- ORDER BY 2 DESC,3 DESC)
-- GROUP BY 1;


-- SELECT DISTINCT CR.CAMPAIGN,  TXN.HOUSEHOLD_KEY, TXN.SALES_VALUE, TXN.SALES_VALUE
-- FROM TRANSACTION_NEW AS TXN LEFT OUTER JOIN CAMPAIGN_RAW AS CR USING(HOUSEHOLD_KEY)
-- ORDER BY 4 DESC, 2 DESC, 3 DESC;


------------------------------------------------------3) COUPON KPIS---------------------------------------------------------

----3) COUPON KPI
--- Coupon redemption rate: Calculate the percentage of coupons redeemed (from the coupon_redempt_table) compared to the total number of coupons distributed(from the coupon table)
--- Coupon usage by campaign: Measure the number of coupon redemptions (from the coupon_redempt table) for each campaign(in the coupon table)

select * from coupon_redempt_new;
select * from coupon_raw;

--1) IN ORDER TO RETRIEVE ONLY THE PERCENTAGE

select campaign,total_given, total_redeempt,  round((total_redeempt/total_given) *100,2) as percent from
(select campaign, count(distinct COUPON_UPC) as total_redeempt from COUPON_REDEMPT_NEW group by 1) a join
(select campaign, count(distinct COUPON_UPC) as total_given from COUPON_RAW group by 1) b using(campaign);

select CAMPAIGN, COUNT(DISTINCT PRODUCT_ID) AS TOTAL_PRODUCTS,count(distinct COUPON_UPC) as total_count
from COUPON_RAW
group by 1
order by 2 desc;

SELECT CAMPAIGN, NCR.TOTAL_PRODUCTS, NCR.TOTAL_COUPON_GIVEN, count(distinct COUPON_UPC) as TOTAL_COUPON_REDEEM,
ROUND((TOTAL_COUPON_REDEEM/TOTAL_COUPON_GIVEN)*100,2) AS PERCENT
from coupon_redempt_new
INNER JOIN(select CAMPAIGN,COUNT(DISTINCT PRODUCT_ID) AS TOTAL_PRODUCTS,count(distinct COUPON_UPC) as TOTAL_COUPON_GIVEN
from COUPON_RAW
group by 1) AS NCR USING (CAMPAIGN)
group by 1,2,3
order by 5 desc;


-----1st approach
select CAMPAIGN, NCR.TOTAL_PRODUCTS, NCR.TOTAL_COUPON_GIVEN, count(distinct COUPON_UPC) as TOTAL_COUPON_REDEEM , ROUND((TOTAL_COUPON_REDEEM/TOTAL_COUPON_GIVEN)*100, 2) AS PERCENT
from COUPON_REDEMPT_NEW
INNER JOIN (select CAMPAIGN, COUNT(DISTINCT PRODUCT_ID) AS TOTAL_PRODUCTS,count(distinct COUPON_UPC) as TOTAL_COUPON_GIVEN
from COUPON_RAW
group by 1) AS NCR USING (CAMPAIGN) 
group by 1,2,3
order by 5 desc;

------2nd approach for 1st ques
select sum(total_count) from (
SELECT CAMPAIGN, COUNT(DISTINCT PRODUCT_ID) AS TOTAL_PRODUCTS, COUNT(DISTINCT COUPON_UPC) as TOTAL_COUNT, CRN.TOTAL_REDEMPT_COUPON
FROM COUPON_RAW  LEFT JOIN
(SELECT CAMPAIGN, COUNT(DISTINCT COUPON_UPC) AS TOTAL_REDEMPT_COUPON FROM COUPON_REDEMPT_NEW GROUP BY 1) AS CRN USING(CAMPAIGN)
group by 1,4
order by 2 desc);

------2)
select CAMPAIGN, COUNT(DISTINCT PRODUCT_ID) AS TOTAL_PRODUCTS,count(distinct COUPON_UPC) as TOTAL_COUNT, CRN.TOTA_REDEM_COUPON
from COUPON_RAW LEFT JOIN
(SELECT CAMPAIGN, COUNT(DISTINCT COUPON_UPC) AS TOTA_REDEM_COUPON FROM COUPON_REDEMPT_NEW GROUP BY 1) AS CRN USING(CAMPAIGN)
group by 1,4
order by 2 desc;

SELECT COUNT(DISTINCT COMMODITY_DESC) FROM COUPON_RAW JOIN PRODUCT_RAW USING(PRODUCT_ID);
----------------------COUPOND REDEEMED PER PRODUCT

SELECT DISTINCT CR.PRODUCT_ID AS PRODUCT_IDS , PR.COMMODITY_DESC AS COMMODITY, CRN.CAMPAIGN, CRN.COUPON_UPC  AS REDEEMED_COUPONS
FROM COUPON_REDEMPT_NEW AS CRN JOIN COUPON_RAW AS CR USING(COUPON_UPC)
 JOIN PRODUCT_RAW AS PR ON PR.PRODUCT_ID = CR.PRODUCT_ID
GROUP BY 1,2,3,4
ORDER BY 2 DESC;

------------------------COUPON KPI TABLE--------------

CREATE OR REPLACE PROCEDURE COUPON_KPI()
RETURNS STRING
LANGUAGE SQL
AS
$$
CREATE OR REPLACE TABLE COUPON_KPI AS SELECT CAMPAIGN,NCR.TOTAL_PRODUCTS,NCR.TOTAL_COUPON_GIVEN, count(distinct COUPON_UPC) as TOTAL_COUPON_REDEEM, ROUND((TOTAL_COUPON_REDEEM/TOTAL_COUPON_GIVEN)* 100,2) AS PERCENT
FROM COUPON_REDEMPT_NEW
INNER JOIN(SELECT CAMPAIGN, COUNT(DISTINCT PRODUCT_ID) AS TOTAL_PRODUCTS, count(distinct coupon_UPC) as TOTAL_COUPON_GIVEN
FROM COUPON_RAW
GROUP BY 1) AS NCR USING (CAMPAIGN)
GROUP BY 1,2,3
ORDER BY 5 DESC;
$$;

SHOW PROCEDURES;

CALL COUPON_KPI();

SELECT * FROM COUPON_KPI;

--------------------

select store_id, count(distinct household_key), count(distinct crn.coupon_upc) AS COUP_COUNT
from transaction_new LEFT join coupon_redempt_new as crn using(household_key)
group by 1
HAVING COUP_COUNT = 0
order by 2 DESC;

SELECT store_id, COUNT(DISTINCT household_key) AS household_count,
COUNT(DISTINCT CASE WHEN crn.coupon_upc IS NOT NULL THEN crn.coupon_upc ELSE NULL END) AS COUP_COUNT
FROM transaction_new
LEFT JOIN coupon_redempt_new AS crn
USING (household_key)
GROUP BY store_id
HAVING COUNT(DISTINCT CASE WHEN crn.coupon_upc IS NOT NULL THEN crn.coupon_upc ELSE NULL END) = 0
ORDER BY household_count DESC;

select  txn.household_key, count(distinct crn.coupon_upc)
from transaction_new txn join coupon_redempt_new as crn using(household_key)
group by 1;

select household_key, count(distinct coupon_upc)
from coupon_redempt_new group by 1;


select crn.coupon_upc, count(distinct household_key) as total
from transaction_new join coupon_redempt_new as crn using(household_key)
where coupon_status = 'Coupon Used'
group by 1;

select coupon_status, count(distinct household_key)
from transaction_new group by 1;

-----------------------------------------------------------4) PRODUCT KPI------------------------------------------------------

---4)Product KPI
-- Sales value: Calculate the total sales value for each product (in the Transaction_data table) to identify top-selling products. 
-- Manufacturer distribution: Analyze the distribution of products across different manufacturers (in the Product table). 
-- Department-wise sales: Measure the sales value by department (in the Product table) to understand which departments contribute most to revenue. 
-- Brand-wise sales: Calculate the sales value for each brand (in the Product table) to identify top-selling brands. 

SELECT * FROM PRODUCT_RAW
WHERE PRODUCT_ID = 26093;
SELECT * FROM TRANSACTION_NEW;

SELECT COUNT(DISTINCT SUB_COMMODITY_DESC) FROM PRODUCT_RAW;


--1
SELECT PRODUCT_ID, PR.COMMODITY_DESC , SUM(QUANTITY* (SALES_VALUE + RETAIL_DISC)) AS TOTAL_SALES
FROM TRANSACTION_NEW JOIN
PRODUCT_RAW AS PR USING(PRODUCT_ID)
GROUP BY 1,2
ORDER BY 3 DESC;

--2
SELECT MANUFACTURER, COUNT(PRODUCT_ID) AS TOTAL_PRODUCTS
FROM PRODUCT_RAW
SAMPLE(100)
GROUP BY 1
ORDER BY 2 DESC
;
SELECT * FROM PRODUCT_RAW
SAMPLE(50)
;

--3
SELECT * FROM
(
SELECT PR.DEPARTMENT, SUM(QUANTITY* (SALES_VALUE + RETAIL_DISC )) AS TOTAL_SALES
FROM TRANSACTION_NEW JOIN
PRODUCT_RAW AS PR USING(PRODUCT_ID)
--WHERE PR.DEPARTMENT NOT IN ('GROCERY','PROCEDURE')
GROUP BY 1
ORDER BY 2 DESC)
SAMPLE(50);

--4
SELECT PR.BRAND , SUM(QUANTITY* (SALES_VALUE + RETAIL_DISC)) AS TOTAL_SALES
FROM TRANSACTION_NEW JOIN
PRODUCT_RAW AS PR USING(PRODUCT_ID)
GROUP BY 1
ORDER BY 2 DESC;

----PRODUCT KPI TABLE

CREATE OR REPLACE PROCEDURE Product_kpi()
RETURNS STRING
LANGUAGE SQL
AS
$$
CREATE OR REPLACE TABLE Product_kpi AS SELECT  PRODUCT_ID,PR.MANUFACTURER, PR.COMMODITY_DESC, PR.DEPARTMENT, PR.BRAND, SUM(SALES_VALUE) AS TOTAL_SALES
FROM TRANSACTION_NEW LEFT OUTER JOIN
PRODUCT_RAW AS PR USING(PRODUCT_ID)
GROUP BY 1,2,3,4,5
ORDER BY 2 DESC;
$$;

CALL Product_kpi();

SELECT * FROM Product_kpi;


-----------------------------------------------------5) TRANSACTIONS KPI ----------------------------------------------------

---5)TRANSACTION KPI
---Total sales value : Calculate the sum of sales values (in the Transaction_data table) to measure overall revenue.
---Average transaction value : Calculate the average sales value per transaction to understand customer spending patterns.
---Quantity sold : Measure the total quantity sold( in the Transaction_Data table) to understand product demand.
---Discounts : Analyze the amount and impact od discounts (RETAIL_DISC, COUPON_DISC, COUPON_MATCH_DISC) on sales value.

SELECT* FROM RETAILS.PUBLIC.TRANSACTION_NEW;
SELECT (QUANTITY*SALES_VALUE) AS TOTAL_REVENUE, SUM(SALES_VALUE) AS TOTAL_SALES FROM RETAILS.PUBLIC.TRANSACTION_NEW
GROUP BY 1;

SELECT PRODUCT_ID,AVG(SALES_VALUE) AS AVG_SALE_PER_TRNX FROM RETAILS.PUBLIC.TRANSACTION_NEW
GROUP BY 1;

SELECT PRODUCT_ID,SUM(QUANTITY)AS TOTAL_QTY FROM RETAILS.PUBLIC.TRANSACTION_NEW
GROUP BY 1;

SELECT 
    SUM(RETAIL_DISC) AS total_retail_discount,
    SUM(COUPON_DISC) AS total_coupon_discount,
    SUM(COUPON_MATCH_DISC) AS total_coupon_match_discount,
    SUM(RETAIL_DISC + COUPON_DISC + COUPON_MATCH_DISC) AS total_discount_amount,
    SUM(sales_value) AS total_sales_value,
    (SUM(RETAIL_DISC + COUPON_DISC + COUPON_MATCH_DISC) / SUM(sales_value)) * 100 AS discount_impact_percentage
FROM
    RETAILS.PUBLIC.TRANSACTION_NEW;
    
CREATE OR REPLACE PROCEDURE TRANSACTION_KPI()
RETURNS STRING
LANGUAGE SQL
AS
 $$   
CREATE OR REPLACE TABLE TRANSACTION_KPI AS 
SELECT PRODUCT_ID,DATE,(QUANTITY*SALES_VALUE) AS TOTAL_REVENUE,SUM(SALES_VALUE) AS TOTAL_SALES ,AVG(SALES_VALUE) AS AVG_SALE_PER_TRNX ,SUM(QUANTITY)AS TOTAL_QTY,SUM(COUPON_DISC) AS total_coupon_discount, 
SUM(COUPON_MATCH_DISC) AS total_coupon_match_discount,SUM(RETAIL_DISC + COUPON_DISC + COUPON_MATCH_DISC) AS total_discount_amount FROM RETAILS.PUBLIC.TRANSACTION_NEW
GROUP BY 1,2,3;
$$;

CALL TRANSACTION_KPI();

SELECT * FROM TRANSACTION_KPI;